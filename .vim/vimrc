""
"" General
""
set nocompatible  " Uses vim, no vi defaults
set history=500   " Sets how many lines of history VIM has to remember
set autoread      " Sets to auto read when a file is changed from the outside
set hid           " A buffer becomes hidden when it is abandoned
set lazyredraw    " Don't redraw while executing macros
set encoding=utf8 " Sets the default encoding of files


""
"" User interface
""
set scrolloff=3     " Starts scrolling three lines before reaching the end
set cmdheight=1     " Height of the command bar
set ruler           " Shows line and column number
set showmatch       " Shows matching brackets when text indicator is over them
set mat=2           " Tenths of a second to blink when matching brackets
set colorcolumn=80  " Shows a vertical guide at give column
set cursorline      " Highlights the current line
set number          " Shows line numbers
set spelllang=en_gb " Sets the language of the spell checker
filetype plugin on  " Loads plugins for file type
filetype indent on  " Loads indentation rules for file type
syntax enable       " Enables syntax highlighting


""
"" Fonts and colors
""
try
    colorscheme Tomorrow-Night
catch
endtry


""
"" Backups
""
set nobackup
set nowb
set noswapfile


""
"" Indentation
""
set ai           " Enables auto-indent
set si           " Enables smart-indent
set expandtab    " Prefers spaces over tabs
set smarttab     " Be smart when using tabs
set tabstop=4    " Tab length
set shiftwidth=4 " Auto-indent length
set backspace=2  " Backspace through everything in insert mode
set wrap         " Wrap lines


""
"" Searching
""
set hlsearch   " Highlights matches
set incsearch  " Enables incremental search
set ignorecase " Enables case insensitive search...
set smartcase  " ...unless they contain at least one capital letter

" Toggle hlsearch with <leader>hs
nmap <leader>hs :set hlsearch! hlsearch?<CR>


""
"" listchars (reveals invisible characters)
""
set listchars=""          " Resets the listchars
set listchars=tab:\ \     " Reveals tabs
set listchars+=trail:.    " Reveals trailing spaces
set listchars+=extends:>  " Reveals where a line starts wrapping
set listchars+=precedes:< " Reveals where a wrapped line continues


""
"" Ignoring files
""
set wildmenu
set wildignore+=*.o,*.out,*.obj,.git,*.rbc,*.rbo,*.class,.svn,*.gem
set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz
set wildignore+=*/vendor/gems/*,*/vendor/cache/*,*/.bundle/*,*/.sass-cache/*
set wildignore+=*.swp,*~,._*


""
"" statusline
""
if has("statusline") && !&cp
    set laststatus=2  " Always show the status bar

    set statusline=%t
    set statusline+=\ Line:\ %l/%L
    set statusline+=\ Column:\ %v
    set statusline+=%=
    set statusline+=%y\ [%{''.(&fenc!=''?&fenc:&enc).''}]%(\ %M%R%)\ Buffer\ #%n
endif


""
"" netrw
""
let g:netrw_banner = 0
let g:netrw_liststyle = 3
let g:netrw_browse_split = 4
let g:netrw_altv = 1
let g:netrw_winsize = 25


""
"" autocmd
""
fun! s:prepareForMarkdown()
    setlocal wrap
    setlocal linebreak
    setlocal textwidth=80
    setlocal nolist
    setlocal spell
endfunction

fun! s:removeTrailingSpaces()
    let save_cursor = getpos(".")
    let old_query = getreg('/')
    silent! %s/\s\+$//e
    call setpos('.', save_cursor)
    call setreg('/', old_query)
endfun

if has("autocmd")
    " Uses tabs in Makefiles
    au FileType make setlocal noexpandtab

    " Checks spelling in Git messages
    au FileType gitcommit setlocal spell

    " Treats JSON files like JavaScript
    au BufNewFile,BufRead *.json setlocal filetype=javascript

    " Makes Python follow PEP8 for whitespace
    au FileType python setlocal softtabstop=4 tabstop=4 shiftwidth=4

    " Uses tabs in PHP
    au FileType php setlocal tabstop=2 noexpandtab

    " Uses two spaces in Ruby
    au FileType ruby setlocal softtabstop=2 tabstop=2 shiftwidth=2

    " Treats Fastlane files like Ruby
    au BufNewFile,BufRead Fastfile setlocal filetype=ruby

    " Treats CocoaPods files like Ruby
    au BufNewFile,BufRead *.podspec setlocal filetype=ruby
    au BufNewFile,BufRead Podfile setlocal filetype=ruby

    " Treats Danger files like Ruby
    au BufNewFile,BufRead Dangerfile setlocal filetype=ruby

    " Treats Vagrant files like Ruby
    au BufNewFile,BufRead Vagrantfile setlocal filetype=ruby

    " Enables more extensions for Markdown
    au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn} set filetype=markdown

    " Customizes editing for Markdown
    au FileType markdown call s:prepareForMarkdown()

    " Delete trailing white space on save
    au BufWritePre * :call s:removeTrailingSpaces()

    " Remembers last location in file, except for commit messages
    au BufReadPost * if &filetype !~ '^git\c' && line("'\"") > 0 && line("'\"") <= line("$")
                \| exe "normal! g`\"" | endif

    try
        " Shows NerdTree automatically when opening Vim with a directory
        au StdinReadPre * let s:std_in=1
        au VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif

        " Close vim if the only window left open is a NerdTree
        au bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
    catch
    endtry
endif


""
"" NerdTree
""
try
    let g:NERDTreeShowHidden=1 " Shows hidden files in NerdTree
    let g:NERDTreeNodeDelimiter="\u00a0" " Fixes node delimiter on Mac

    " Uses Ctrl+O to toggle NerdTree
    map <C-O> :NERDTreeToggle<CR>
catch
endtry
